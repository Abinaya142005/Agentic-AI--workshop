# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XuH9M-MZlg6jcDGxr_QEdpOT8D2KPJpQ
"""

# Install required libraries
!pip install google-generativeai tavily-python

# Import necessary libraries
import os
import google.generativeai as genai
from tavily import TavilyClient
import re
import json
from typing import List, Dict

# Set up API keys (replace with your actual keys)
os.environ['GOOGLE_API_KEY'] = 'AIzaSyDvmXdoYK0Nu3OlOV8q_KYpZXgodSWir5E'
os.environ['TAVILY_API_KEY'] = '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'

# Configure Gemini API
genai.configure(api_key=os.environ['GOOGLE_API_KEY'])
model = genai.GenerativeModel('gemini-2.0-flash')

# Initialize Tavily client
tavily = TavilyClient(api_key=os.environ['TAVILY_API_KEY'])

class ReActAgent:
    def __init__(self, topic: str):
        self.topic = topic
        self.research_questions = []
        self.search_results = {}
        self.report = ""

    def generate_research_questions(self) -> List[str]:
        """Generate key research questions using Gemini (Planning Phase)

        You are a research assistant. Given the topic '{self.topic}', generate a list of 3-5 key research questions to guide a web-based research process. Return the questions as a numbered list in plain text.
        Example:
        1. What is the history of X?
        2. How does X impact Y?
        3. What are the current trends in X?
        """
        prompt = f"""
        You are a research assistant. Given the topic '{self.topic}', generate a list of 3-5 key research questions to guide a web-based research process. Return the questions as a numbered list in plain text.
        Example:
        1. What is the history of X?
        2. How does X impact Y?
        3. What are the current trends in X?
        """
        response = model.generate_content(prompt)
        questions = response.text.strip().split('\n')
        self.research_questions = [q.strip() for q in questions if q.strip()]
        return self.research_questions

    def search_web(self) -> Dict[str, str]:
        """Search the web for answers using Tavily (Acting Phase)"""
        for question in self.research_questions:
            # Clean question for search query
            query = re.sub(r'^\d+\.\s*', '', question)
            response = tavily.search(query=query, max_results=3)
            # Store top results
            self.search_results[question] = [
                {
                    'title': result['title'],
                    'url': result['url'],
                    'content': result['content']
                }
                for result in response['results']
            ]
        return self.search_results

    def compile_report(self) -> str:
        """Compile a structured report based on gathered information"""
        report = f"# Research Report on {self.topic}\n\n"
        for question in self.research_questions:
            report += f"## {question}\n"
            results = self.search_results.get(question, [])
            if results:
                for i, result in enumerate(results, 1):
                    report += f"### Source {i}: {result['title']}\n"
                    report += f"- **URL**: {result['url']}\n"
                    report += f"- **Summary**: {result['content'][:300]}...\n\n"
            else:
                report += "No relevant information found.\n\n"

        self.report = report
        return self.report

    def run(self) -> str:
        """Execute the full ReAct pipeline"""
        print("Generating research questions...")
        self.generate_research_questions()
        print("Searching the web...")
        self.search_web()
        print("Compiling report...")
        return self.compile_report()

# Example usage
if __name__ == "__main__":
    topic = input("Enter research topic: ")  # e.g., "Artificial Intelligence in Healthcare"
    agent = ReActAgent(topic=topic)
    report = agent.run()

    # Display the report
    from IPython.display import display, Markdown
    display(Markdown(report))

    # Save report to file
    with open('research_report.md', 'w') as f:
        f.write(report)
    print("Report saved as 'research_report.md'")

import os
import google.generativeai as genai
from tavily import TavilyClient

# Set your Gemini API key
os.environ["GOOGLE_API_KEY"] = "AIzaSyDvmXdoYK0Nu3OlOV8q_KYpZXgodSWir5E"
genai.configure(api_key=os.environ["GOOGLE_API_KEY"])

# Set your Tavily API key
os.environ["TAVILY_API_KEY"] = "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"
tavily_client = TavilyClient(api_key=os.environ["TAVILY_API_KEY"])

# Planning Phase: Generate research questions
def generate_research_questions(topic):
    prompt = f"""
    You are a research planner. Given the topic: "{topic}", list 5 important research questions
    a person should explore to fully understand the topic.
    """
    model = genai.GenerativeModel("gemini-pro")
    response = model.generate_content(prompt)
    questions = response.text.strip().split('\n')
    return [q.lstrip("0123456789. ").strip() for q in questions if q.strip()]

# Acting Phase: Search the web using Tavily for each question
def search_answers(questions):
    results = {}
    for q in questions:
        print(f"Searching: {q}")
        search_result = tavily_client.search(query=q, search_depth="advanced", include_answer=True)
        results[q] = search_result.get("answer", "No answer found.")
    return results

# Combine questions and answers into a structured report
def compile_report(topic, qa_dict):
    report = f"# Research Report: {topic}\n\n"
    for i, (question, answer) in enumerate(qa_dict.items(), 1):
        report += f"## {i}. {question}\n{answer}\n\n"
    return report

# Main flow
def run_web_research_agent(topic):
    questions = generate_research_questions(topic)
    answers = search_answers(questions)
    report = compile_report(topic, answers)
    return report

# Example
topic = "Impacts of AI on Education"
report = run_web_research_agent(topic)
print(report)